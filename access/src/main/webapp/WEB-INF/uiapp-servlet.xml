<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2008 The University of North Carolina at Chapel Hill

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<context:annotation-config />

	<bean name="propertiesURI" class="java.lang.System"
		factory-method="getProperty">
		<constructor-arg index="0" value="server.properties.uri" />
		<!-- property name for properties URI location -->
		<constructor-arg index="1" value="classpath:server.properties" />
		<!-- default location for testing -->
	</bean>
	<bean id="serverProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<ref bean="propertiesURI" />
				<!-- non-runtime stuff <value>classpath:solr-ingest.properties</value> -->
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="false" />
	</bean>

	<!-- Utils -->

	<bean id="externalContentSettings" class="edu.unc.lib.dl.ui.util.ExternalContentSettings">
		<property name="properties" ref="externalContentProperties" />
	</bean>

	<bean id="lookupMappingsSettings" class="edu.unc.lib.dl.ui.util.LookupMappingsSettings"
		init-method="init">
		<property name="sourcePaths" value="#{externalContentSettings.list('mapping')}" />
	</bean>

	<!-- Beans -->

	<bean id="staticBaseUrl" class="java.lang.String">
		<constructor-arg
			value="${external.base.url}" />
	</bean>

	<!-- Properties objects -->
	<util:properties id="externalContentProperties"
		location="classpath:externalContent.properties">
		<prop key="external.base.url">${external.base.url}</prop>
	</util:properties>
	
	<!-- Request form -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="formValidationMessages" />
	</bean>
	
	<bean class="edu.unc.lib.dl.ui.validator.RequestAccessFormValidator"/>
	<bean class="edu.unc.lib.dl.ui.validator.ContactFormValidator"/>
	
	<bean id="reCaptcha" class="net.tanesha.recaptcha.ReCaptchaImpl">
		<property name="privateKey" value="${recaptcha.private.key}" />
		<property name="publicKey" value="${recaptcha.public.key}" />
		<property name="includeNoscript" value="false" />
		<property name="recaptchaServer" value="#{T(net.tanesha.recaptcha.ReCaptchaImpl).HTTPS_SERVER}" />
		
	</bean>
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${smtp.host}" />
		<property name="port" value="${smtp.port}" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<bean id="requestAccessEmailService" class="edu.unc.lib.dl.ui.service.ContactEmailService">
		<property name="fromAddress" value="${repository.from.email}"/>
		<property name="fromName" value="CDR Request Form"/>
		<property name="defaultSubjectLine" value="Access request received"/>
		<property name="emailRecipients">
			<list>
				<value>${contact.email}</value>
			</list>
		</property>
		<property name="freemarkerConfiguration" ref="freemarkerConfiguration" />
		<property name="htmlTemplatePath" value="requestAccessHtml.ftl"/>
		<property name="mailSender" ref="mailSender"/>
	</bean>
	
	<bean id="requestAccessUserResponseEmailService" class="edu.unc.lib.dl.ui.service.ContactEmailService">
		<property name="fromAddress" value="${repository.reply.email}"/>
		<property name="fromName" value="Carolina Digital Repository"/>
		<property name="defaultSubjectLine" value="Your access request has been received"/>
		<property name="freemarkerConfiguration" ref="freemarkerConfiguration" />
		<property name="htmlTemplatePath" value="requestAccessUserResponseHtml.ftl"/>
		<property name="textTemplatePath" value="requestAccessUserResponseText.ftl"/>
		<property name="mailSender" ref="mailSender"/>
	</bean>
	
	<bean id="contactEmailService" class="edu.unc.lib.dl.ui.service.ContactEmailService">
	<property name="emailRecipients">
			<list>
				<value>${contact.email}</value>
			</list>
		</property>
		<property name="fromAddress" value="${repository.reply.email}"/>
		<property name="fromName" value="CDR Feedback Form"/>
		<property name="defaultSubjectLine" value="CDR Feedback"/>
		<property name="freemarkerConfiguration" ref="freemarkerConfiguration" />
		<property name="htmlTemplatePath" value="contactFormHtml.ftl"/>
		<property name="mailSender" ref="mailSender"/>
	</bean>
	
	<bean id="freemarkerConfiguration" class="freemarker.template.Configuration">
		<property name="templateLoader">
			<bean class="freemarker.cache.ClassTemplateLoader">
				<constructor-arg index="0" type="java.lang.Class"
					value="edu.unc.lib.dl.ui.service.ContactEmailService" />
				<constructor-arg index="1" value="" />
			</bean>
		</property>
	</bean>
	
	<bean name="headerMenuSettings" class="edu.unc.lib.dl.ui.util.HeaderMenuSettings" init-method="init">
		<property name="propertiesUrl" value="${external.base.file.url}/mappings/headerMenu.properties"/>
	</bean>

	<!-- Import controllers -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"></bean>
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	</bean>
	<context:component-scan base-package="edu.unc.lib.dl.ui.controller" />

	<!-- Map logical view names to physical views <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		p:suffix=".jsp"/> -->
	<bean class="edu.unc.lib.dl.ui.view.CDRViewResolver" p:suffix=".jsp">
		<property name="exposedContextBeanNames">
			<list>
				<value>headerMenuSettings</value>
				<value>searchSettings</value>
				<value>externalContentSettings</value>
				<value>fedoraUtil</value>
				<value>accessGroupConstants</value>
			</list>
		</property>
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="baseView" value="/WEB-INF/jsp/index" />
		<property name="subViewPrefix" value="" />
	</bean>

	<bean class="edu.unc.lib.dl.ui.view.XSLViewResolver">
		<!-- property name="views" value="#{externalContentSettings.map('xslView')}" /-->
		<property name="views">
			<map>
				<entry key="external.xslView.fullRecord.url" value="${external.base.file.url}recordTransformations/fullRecord.xsl"/>
			</map>
		</property>
	</bean>
	
	<bean name="storeAccessLevelFilter" class="edu.unc.lib.dl.ui.access.StoreAccessLevelFilter">
		<property name="queryLayer" ref="queryLayer" />
		<property name="requireViewAdmin" value="false" />
	</bean>
	
	<!-- JMX -->
	<bean id="loggingExporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="beans">
			<map>
				<entry key="cdr-access:jmxservice=loggingConfiguration" value-ref="loggingMBean" />
			</map>
		</property>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
		<property name="assembler">
			<bean class="org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler">
				<property name="managedInterfaces">
					<array value-type="java.lang.Class">
						<value>de.stefanheintz.log.jmxservice.LoggingConfig</value>
					</array>
				</property>				
			</bean>
		</property>
	</bean>
	
	<!-- http://code.google.com/p/logging-jmx-service/wiki/Tutorial -->
	<bean id="loggingMBean" class="de.stefanheintz.log.jmxservice.LoggingConfigImpl">
	</bean>

	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="beans">
			<map>
				<entry key="cdr-access:name=searchSettings" value-ref="searchSettings" />
				<entry key="cdr-access:name=headerMenuSettings" value-ref="headerMenuSettings" />
			</map>
		</property>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
	</bean>
</beans>